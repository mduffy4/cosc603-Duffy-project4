/*
 * 
 */
package edu.towson.cis.cosc603.project4.vendingmachine;

import static org.junit.Assert.*;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class VendingMachineTest {
	
	VendingMachineItem vendingItem;
	VendingMachine vendingMachine;

	/**
	 * Initializes the necessary test objects for the test cases to use.
	 *
	 * @throws Exception the exception
	 */
	@Before
	public void setUp() throws Exception {
		vendingMachine = new VendingMachine();
		vendingItem = new VendingMachineItem("name", 1.0);
	}

	/**
	 * Cleans up test objects after a test case is executed.
	 */
	@After
	public void tearDown() throws Exception {
		vendingItem = null;
		vendingMachine = null;
	}

	
	@Test
	public void testAddItem() {
		vendingMachine.addItem(vendingItem, "A");
		assertEquals(vendingItem, vendingMachine.getItem("A"));
	}
	
	@Test (expected=VendingMachineException.class)
	public void testAddItemSlotOccupied() {
		vendingMachine.addItem(vendingItem, "A");
		VendingMachineItem newVendingItem = new VendingMachineItem("newName", 1.0);
		vendingMachine.addItem(newVendingItem, "A");
		assertEquals(vendingItem, newVendingItem);
	}
	
	@Test (expected=VendingMachineException.class)
	public void testAddItemInvailidCode() {
		vendingMachine.addItem(vendingItem, "X");
		assertFalse("Slot X already occupied",false);
	}

	@Test
	public void testGetItemA() {
		vendingMachine.addItem(vendingItem, "A");
		VendingMachineItem testVendItem = vendingMachine.getItem("A");
		assertEquals(vendingItem, testVendItem);
	}
	
	@Test
	public void testGetItemB() {
		vendingMachine.addItem(vendingItem, "B");
		VendingMachineItem testVendItem = vendingMachine.getItem("B");
		assertEquals(vendingItem, testVendItem);
	}
	
	@Test
	public void testGetItemC() {
		vendingMachine.addItem(vendingItem, "C");
		VendingMachineItem testVendItem = vendingMachine.getItem("C");
		assertEquals(vendingItem, testVendItem);
	}
	
	@Test
	public void testGetItemD() {
		vendingMachine.addItem(vendingItem, "D");
		VendingMachineItem testVendItem = vendingMachine.getItem("D");
		assertEquals(vendingItem, testVendItem);
	}
	
	@Test (expected=VendingMachineException.class)
	public void testGetItemBadCode() {
		vendingMachine.getItem("X");
	}
	
	@Test
	public void testGetItemEmptyCode() {
		VendingMachineItem testVendItem = vendingMachine.getItem("B");
		assertNull(testVendItem);
	}

	@Test
	public void testRemoveItem() {
		vendingMachine.addItem(vendingItem, "A");
		assertEquals(vendingItem, vendingMachine.removeItem("A"));
	}
	
	@Test (expected=VendingMachineException.class)
	public void testRemoveItemBadCode() {
		vendingMachine.removeItem("X");
	}
	
	@Test (expected=VendingMachineException.class)
	public void testRemoveItemEmptyCode() {
		vendingMachine.removeItem("B");
	}

	@Test
	public void testInsertMoney() {
		double initialValue = vendingMachine.getBalance();
		vendingMachine.insertMoney(1.0);
		double newValue = vendingMachine.getBalance();
		assertEquals(initialValue + 1.0, newValue, 0.01);
	}
	
	@Test (expected=VendingMachineException.class)
	public void testInsertMoneyLessThanZero() {
		vendingMachine.insertMoney(-1.0);
	}

	@Test
	public void testGetBalance() {
		assertEquals(0.0, vendingMachine.getBalance(), 0.01);
	}

	@Test
	public void testMakePurchase() {
		vendingMachine.addItem(vendingItem, "A");
		vendingMachine.insertMoney(1.0);;
		assertTrue(vendingMachine.makePurchase("A"));
	}
	
	@Test (expected=VendingMachineException.class)
	public void testMakePurchaseBadCode() {
		vendingMachine.makePurchase("X");
	}
	
	@Test 
	public void testMakePurchaseEmptyCode() {
		assertFalse(vendingMachine.makePurchase("B"));
	}
	
	@Test
	public void testMakePurchaseNotEnoughMoney() {
		vendingMachine.addItem(vendingItem, "A");
		vendingMachine.insertMoney(0.5);
		assertFalse(vendingMachine.makePurchase("A"));
	}

	@Test
	public void testReturnChange() {
		vendingMachine.insertMoney(1.0);
		assertEquals(1.0,vendingMachine.returnChange(),0.01);
	}
	
	@Test
	public void testReturnChangeNoMoney() {
		assertEquals(0.0,vendingMachine.returnChange(),0.01);
	}

}
